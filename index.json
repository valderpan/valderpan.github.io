[{"categories":["R"],"content":"【stringr】处理字符串 【数据与平行世界】R数据处理-4:stringr与正则表达式 1.【str_extract、str_extract_all】 字符串提取 字符提取函数str_extract和str_extract_all，对字符串进行提取，str_extract_all函数返回所有的匹配结果。 # 提取第一个匹配到的字符 str_extract(string = \"banana\",pattern = \"a\") ## [1] \"a\" # 提取所有匹配到的字符（返回列表） str_extract_all(string = \"banana\",pattern = \"a\") ## [[1]] ## [1] \"a\" \"a\" \"a\" # 提取所有匹配到的字符（返回矩阵） str_extract_all(string = \"banana\",pattern = \"a\", simplify = T) ## [,1] [,2] [,3] ## [1,] \"a\" \"a\" \"a\" 需求一：添加一列，此列为原df里面某一列中的几个字符。例如去掉等位的染色体ID #使用正则表达式匹配 dd %\u003e% mutate(CHR=str_extract(X1,\"Chr\\\\d+\")) #BaseR dd %\u003e% mutate(CHR=substr(X1,1,5)) 2.【str_c】字符串拼接 stringr str_c需要传入两个字符参数，另外,collapse参数是将两个字符参数连接，sep参数是将两个字符参数内部的字符连接 即：「sep用于指定变量内连接符，collapse用于指定变量间连接符！」 所谓变量间：如：c(“a”,“b”)；c(“c”,“d”) – 这就是两个变量，指定他们之间的连接符用的就是 collapse； 所谓变量内：如：c(“a”,“b”) – a和 b都属于一个向量，所以他们两之间的连接符用 sep来指定！ # 默认无向量分割符拼接 str_c(\"a\",\"b\") ## [1] \"ab\" # 指定向量分隔符 str_c(\"a\",\"b\",sep = \"_\") ## [1] \"a_b\" # 指定向量折叠符 str_c(c(\"a\",\"b\",\"c\"),collapse = \"_\") ## [1] \"a_b_c\" # 混合应用 str_c(c(\"a\",\"b\"),c(\"c\",\"d\"),sep = \"/\",collapse = \"_\") ## [1] \"a/c_b/d\" str_c(c('a','b'),c('c','d'),collapse = '\\\\') ## [1] \"ac\\\\bd\" 使用baseR实现上述： ## 顺便再科普一下paste和paste0的用法: 两者的唯一区别在于paste0的sep=\"\" paste(\"a\",\"b\") # 默认用空格连接 # [1] \"a b\" paste0(\"a\",\"b\") # 默认无向量分割符拼接 # [1] \"ab\" paste(\"a\",\"b\",sep = \"_\") # 指定分割符,但是paste0没有sep参数！ # [1] \"a_b\" paste(c(\"a\",\"b\",\"c\"),collapse = \"_\") # paste元素内部连接 # [1] \"a_b_c\" paste0(c(\"a\",\"b\",\"c\"),collapse = \"_\") # paste0元素内部连接 # [1] \"a_b_c\" # 混合应用 paste(c(\"a\",\"b\"),c(\"c\",\"d\"),sep = \"/\",collapse = \"_\") # [1] \"a/c_b/d\" paste0(c(\"a\",\"b\"),c(\"c\",\"d\"), collapse = \"_\") # [1] \"ac_bd\" 3.【str_split、str_split_fixed】字符串分割 字符分割函数str_split和str_split_fixed，对字符串进行分割。 # 字符分割，返回列表 str_split(string = \"banana\",pattern = \"\") ## [[1]] ## [1] \"b\" \"a\" \"n\" \"a\" \"n\" \"a\" # 字符分割，返回矩阵 str_split(string = \"banana\",pattern = \"\",simplify = T) ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] \"b\" \"a\" \"n\" \"a\" \"n\" \"a\" # 字符分割，指定分割块数 str_split_fixed(string = \"banana\",pattern = \"\",n = 3) ## [,1] [,2] [,3] ## [1,] \"b\" \"a\" \"nana\" 4.【str_sub、str_subset】 提取字符串 函数str_sub和str_subset str_sub函数通过指定开始和结束位置，提取出字符串的部分字符串。str_subset函数通过匹配模式，过滤出满足模式的字符串。 ###### 按位置提取：###### # 字符提取（正向索引） str_sub(string = \"banana\",start = 1,end = 3) ## [1] \"ban\" # 字符提取（反向索引） str_sub(string = \"banana\",start = -2,end = -1) ## [1] \"na\" # 字符提取，并赋值 x \u003c- \"banana\" str_sub(string = x,start = 1,end = 1) \u003c- \"A\" print(x) ## [1] \"Aanana\" ###### 按匹配模式提取 ###### # 字符串提取（返回字符串） str_subset(string = c(\"java\",\"sql\",\"python\"),pattern = \"^s\") ## [1] \"sql\" # 字符串提取（返回位置） str_which(string = c(\"java\",\"sql\",\"python\"),pattern = \"^s\") ## [1] 2 5.【str_count】 统计字符串出现的次数 字符计数函数str_count，计算字符串中指定字符的个数。 # 单个目标字符计数 str_count(string = c(\"sql\",\"json\",\"java\"),pattern = \"s\") ## [1] 1 1 0 # 多个目标字符计数 str_count(string = c(\"sql\",\"json\",\"java\"),pattern = c(\"s\",\"j\",\"a\")) ## [1] 1 1 2 # 元字符查找计数（fixed包裹元字符） str_count(string = \"a..b\",pattern = fixed(\".\")) ## [1] 2 6.【str_detect】字符检查 # 字符检查函数`str_detect`，检查字符串中是否包含指定字符，返回逻辑向量。 str_detect(string = c(\"sql\",\"json\",\"java\"),pattern = \"s\") ## [1] TRUE TRUE FALSE 7.【str_dup】字符复制 字符复制函数str_dup，将字符向量重复若干次，返回重复后的字符向量。 str_dup(string = c(\"sql\",\"json\",\"java\"),times = 2) ## [1] \"sqlsql\" \"jsonjson\" \"javajava\" 8.【str_glue】字符格式化 字符串格式化函数str_glue，用花括号{}表示占位符，括号内的变量被替换成全局变量值。 # 定义全局变量 name \u003c- \"jack\" age \u003c- 12 # 字符串格式化 str_glue(\"My name is {name},\",\"\\nmy age is {age}.\") ## My name is jack, ## my age is 12. 9.【str_length】字符串长度 字符串长度函数str_length，计算字符串长度。 str_length(string = \"banana\") ## [1] 6 # 功能等同于R自带的函数： nchar(\"banana\") 10.【str_locate、str_locate_all】字符位置提取 字符位置提取函数str_locate和str_locate_all,返回匹配到的字符的位置。 # 返回第一个匹配到的字符的位置 str_locate(string = \"banana\",pattern = \"a\") ## start end ## [1,] 2 2 # 返回所有匹配到的字符的位置 str_locate_all(string = \"banana\",pattern = \"a\") ## [[1]] ## start end ## [1,] 2 2 ## [2,] 4 4 ## [3,] 6 6 11.【str_pad】字符补齐 字符补齐函数str_pad，用于在字符串中添加单个字符，可选择添加的位置，在参数side中进行设置。 # 默认字符串左边补齐 str_pad(string = \"jack\",width = 6,pad = \"S\") ## [1] \"SSjack\" # 字符串右边补齐 str_pad(string = \"jack\",width = 6,side = \"right\",pad = \"S\") ## [1] \"jackSS\" # 字符串两边补齐 str_p","date":"2022-01-19","objectID":"/stringr%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2/:0:0","tags":["编程"],"title":"Stringr处理字符串","uri":"/stringr%E5%A4%84%E7%90%86%E5%AD%97%E7%AC%A6%E4%B8%B2/"},{"categories":["杂记"],"content":"使用Hugo搭建个人博客步骤： 1.安装Hugo、Git等必要软件 2.执行 hugo new site MyBlog创建本地博客文件夹 3.执行git init将文件夹交给git管理 4.执行git clone https://github.com/dillonzq/LoveIt.git themes/LoveIt指令下载主题 5.修改博客根目录下的config.toml文件 6.执行hugo new posts/my-first-post.md添加第一篇博客 7.执行hugo server -D -e production在本地预览博客 8.Github创建对应的仓库，注意仓库名 9.执行hugo -D编译静态博客页面 10.执行git init将public文件夹交给git管理 ","date":"2022-01-19","objectID":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/:0:0","tags":["日记"],"title":"使用Hugo搭建个人博客步骤","uri":"/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/"}]